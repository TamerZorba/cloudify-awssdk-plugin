tosca_definitions_version: cloudify_dsl_1_3

imports:
- http://www.getcloudify.org/spec/cloudify/4.0.1/types.yaml
- http://getcloudify.org.s3.amazonaws.com/spec/aws-plugin/1.4.10/plugin.yaml
- https://raw.githubusercontent.com/cloudify-incubator/cloudify-boto3-plugin/1.0.0m5/plugin.yaml
- http://www.getcloudify.org/spec/fabric-plugin/1.4.2/plugin.yaml

inputs:

  aws_access_key_id:
    type: string

  aws_secret_access_key:
    type: string

  aws_region_name:
    type: string
    default: us-east-1

dsl_definitions:
  client_config: &client_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    region_name: { get_input: aws_region_name }

  aws_config: &aws_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    ec2_region_name: { get_input: aws_region_name }

node_templates:

  mount:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_commands
          inputs:
            use_sudo: true
            commands:
            - yum update -y
            fabric_env: &mount_fabric_env
              host_string: { get_attribute: [ elasticip, aws_resource_id ] }
              user: ec2-user
              key_filename: { get_property: [ key, private_key_path ] }
        configure:
          implementation: fabric.fabric_plugin.tasks.run_commands
          inputs:
            use_sudo: true
            commands:
            - yum -y install nfs-utils
            fabric_env: *mount_fabric_env
        start:
          implementation: fabric.fabric_plugin.tasks.run_commands
          inputs:
            use_sudo: true
            commands:
            - mkdir /efs
            - concat:
              - 'mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 '
              - { get_attribute: [ mount_target, IpAddress ] }
              - ':/ efs'
            fabric_env: *mount_fabric_env
    relationships:
    - type: cloudify.relationships.depends_on
      target: instance

  instance:
    type: cloudify.aws.nodes.Instance
    properties:
      agent_config:
        install_method: none
      image_id: ami-01ccc867
      instance_type: t2.micro
      aws_config: *aws_config
    relationships:
    - type: cloudify.aws.relationships.instance_connected_to_subnet
      target: subnet
    - type: cloudify.aws.relationships.instance_connected_to_security_group
      target: security_group
    - type: cloudify.aws.relationships.connected_to_elastic_ip
      target: elasticip
    - type: cloudify.relationships.depends_on
      target: mount_target
    - type: cloudify.aws.relationships.instance_connected_to_keypair
      target: key

  key:
    type: cloudify.aws.nodes.KeyPair
    properties:
      aws_config: *aws_config
      resource_id: efs-demo
      private_key_path: ~/.ssh/efs-demo.pem

  elasticip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  mount_target:
    type: cloudify.nodes.aws.efs.MountTarget
    properties:
      resource_config: {}
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: security_group
    - type: cloudify.relationships.depends_on
      target: subnet
    - type: cloudify.relationships.depends_on
      target: file_system

  file_system_tags:
    type: cloudify.nodes.aws.efs.FileSystemTags
    properties:
      resource_config:
        kwargs:
          Tags:
          - Key: Name
            Value: file_system_tags
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: file_system

  file_system:
    type: cloudify.nodes.aws.efs.FileSystem
    properties:
      resource_config: {}
      client_config: *client_config

  security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: efs security group
      rules:
      - ip_protocol: -1
        from_port: -1
        to_port: -1
        cidr_ip: 0.0.0.0/0
    relationships:
    - type: cloudify.aws.relationships.security_group_contained_in_vpc
      target: vpc

  route_table:
    type: cloudify.aws.nodes.RouteTable
    properties:
      aws_config: *aws_config
    relationships:
      - type: cloudify.aws.relationships.routetable_contained_in_vpc
        target: vpc
      - type: cloudify.aws.relationships.routetable_associated_with_subnet
        target: subnet
      - type: cloudify.aws.relationships.route_table_to_gateway
        target: igw

  subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      cidr_block:  172.30.0.0/24
      availability_zone: eu-west-1c
    relationships:
    - type: cloudify.aws.relationships.subnet_contained_in_vpc
      target: vpc

  igw:
    type: cloudify.aws.nodes.InternetGateway
    properties:
      aws_config: *aws_config
    relationships:
      - type: cloudify.aws.relationships.gateway_connected_to_vpc
        target: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      cidr_block:  172.30.0.0/16
