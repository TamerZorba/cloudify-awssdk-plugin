tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.1/resources/rest-service/cloudify/types/types.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-aws-plugin/1.4.13/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-boto3-plugin/dev/plugin.yaml

inputs:

  aws_access_key_id:
    type: string
    default: { get_secret: aws_access_key_id }

  aws_secret_access_key:
    type: string
    default: { get_secret: aws_secret_access_key }

  aws_region_name:
    type: string
    default: { get_secret: ec2_region_name }

  aws_region_zone1:
    type: string
    default:
      concat:
      - { get_input: aws_region_name }
      - 'a'

  aws_region_zone2:
    type: string
    default:
      concat:
      - { get_input: aws_region_name }
      - 'b'

  aws_account_id:
    type: string
    default: { get_secret: aws_account_id }

dsl_definitions:

  client_config: &client_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    region_name: { get_input: aws_region_name }

  aws_config: &aws_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    ec2_region_name: { get_input: aws_region_name }

node_templates:

  autoscaling_group:
    type: cloudify.nodes.aws.autoscaling.Group
    properties:
      resource_config:
        kwargs:
          AutoScalingGroupName: pmcfy_asg
          MinSize: 1
          MaxSize: 1
          DefaultCooldown: 20
          AvailabilityZones:
          - { get_input: aws_region_zone1 }
          - { get_input: aws_region_zone2 }
      client_config: *client_config
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: awssdk.cloudify_awssdk.autoscaling.resources.autoscaling_group.create
          inputs:
            resource_config:
              # LaunchConfigurationName: { get_attribute: [ launch_configuration, aws_resource_id ] }
              LaunchConfigurationName: { get_attribute: [ launch_configuration, Outputs, 0, OutputValue ] }
              AutoScalingGroupName: pmcfy_asg
              MinSize: 1
              MaxSize: 1
              DefaultCooldown: 20
              AvailabilityZones:
              - { get_input: aws_region_zone1 }
              - { get_input: aws_region_zone2 }
              LoadBalancerNames:
              - { get_attribute: [ elb, aws_resource_id ] }
        delete:
          implementation: awssdk.cloudify_awssdk.autoscaling.resources.autoscaling_group.delete
          inputs:
            resource_config:
              ForceDelete: true
    relationships:
    - type: cloudify.relationships.depends_on
      target: launch_configuration
    - type: cloudify.relationships.depends_on
      target: elb
    - type: cloudify.relationships.depends_on
      target: subnet1
    - type: cloudify.relationships.depends_on
      target: subnet2
    - type: cloudify.relationships.depends_on
      target: internet_gateway_vpc

#  launch_configuration:
#    type: cloudify.nodes.aws.autoscaling.LaunchConfiguration
#    properties:
#      resource_config:
#        kwargs:
#          LaunchConfigurationName: pmcfy_ex_lc
#      client_config: *client_config
#    interfaces:
#      cloudify.interfaces.lifecycle:
#        configure:
#          implementation: awssdk.cloudify_awssdk.autoscaling.resources.launch_configuration.create
#          inputs:
#            resource_config:
#              LaunchConfigurationName: pmcfy_ex_lc
#              ImageId: ami-c58c1dd3
#              InstanceType: t2.micro
#              SecurityGroups:
#              - { get_attribute: [ securitygroup, aws_resource_id ] }
#              UserData: |
#                #cloud-config
#                users:
#                - name: ubuntu
#                  groups: ubuntu
#                  shell: /bin/bash
#                  sudo: ['ALL=(ALL) NOPASSWD:ALL']
#              IamInstanceProfile: { get_attribute: [ pmcfy_iam_user_instance_profile, aws_resource_arn ] } # Succeeds on retry.
#    relationships:
#      - type: cloudify.relationships.depends_on
#        target: securitygroup
#      - type: cloudify.relationships.depends_on
#        target: pmcfy_iam_user_instance_profile

  launch_configuration:
    type: cloudify.nodes.aws.CloudFormation.Stack
    properties:
      client_config: *client_config
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            resource_config:
              StackName: PMCfyExLCStack
              TemplateBody:
                AWSTemplateFormatVersion: "2010-09-09"
                Description: A sample template
                Outputs:
                  PMCfyExLCLaunchConfigurationName:
                    Description: PMCfyExLC Launch Configuration Name
                    Value:
                      Ref: PMCfyExLC
                Resources:
                  PMCfyExLC:
                    Type: "AWS::AutoScaling::LaunchConfiguration"
                    Properties:
                      ImageId: ami-c58c1dd3
                      InstanceType: t2.micro
                      SecurityGroups:
                      - { get_attribute: [ securitygroup, aws_resource_id ] }
                      IamInstanceProfile: { get_attribute: [ pmcfy_iam_user_instance_profile, aws_resource_arn ] } # Succeeds on retry.
                    Metadata:
                      AWS::CloudFormation::Init:
                        configSets:
                          config:
                          - config_something
                        config_something:
                          commands:
                            some_command:
                              command: "echo hello"
    relationships:
      - type: cloudify.relationships.depends_on
        target: securitygroup
      - type: cloudify.relationships.depends_on
        target: pmcfy_iam_user_instance_profile

  pmcfy_iam_user_instance_profile:
    type: cloudify.nodes.aws.iam.InstanceProfile
    properties:
      client_config: *client_config
      resource_id: pmcfyinstancepro000
      resource_config:
        kwargs:
          InstanceProfileName: pmcfyinstancepro000
    relationships:
    - type: cloudify.relationships.depends_on
      target: pmcfy_iam_role

  pmcfy_iam_role:
    type: cloudify.nodes.aws.iam.Role
    properties:
      resource_id: pmcfy_lambdarole
      client_config: *client_config
      resource_config:
        kwargs:
          Path: !!str /service-role/
          AssumeRolePolicyDocument:
            Version: !!str 2012-10-17
            Statement:
            - Effect: Allow
              Principal:
                Service: !!str lambda.amazonaws.com
              Action: !!str sts:AssumeRole
    relationships:
    - type: cloudify.relationships.aws.iam.role.connected_to
      target: pmcfy_iam_policy_vpc_access
    - type: cloudify.relationships.aws.iam.role.connected_to
      target: pmcfy_iam_policy_cloudwatch_access

  pmcfy_iam_policy_vpc_access:
    type: cloudify.nodes.aws.iam.Policy
    properties:
      resource_id: pmcfy_vpcpolicy
      client_config: *client_config
      resource_config:
        kwargs:
          Description: >-
            Grants access to EC2 network components
          Path: !!str /service-role/
          PolicyDocument:
            Version: !!str 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - !!str ec2:CreateNetworkInterface
              - !!str ec2:DeleteNetworkInterface
              - !!str ec2:DescribeNetworkInterfaces
              Resource: '*'

  pmcfy_iam_policy_cloudwatch_access:
    type: cloudify.nodes.aws.iam.Policy
    properties:
      resource_id: pmcfy_iampolicy
      client_config: *client_config
      resource_config:
        kwargs:
          Description: >-
            Grants access to CloudWatch logs
          Path: !!str /service-role/
          PolicyDocument:
            Version: !!str 2012-10-17
            Statement:
            - Effect: Allow
              Action: !!str logs:CreateLogGroup
              Resource: !!str arn:aws:logs:us-east-1:352582918444:*
            - Effect: Allow
              Action:
              - !!str logs:CreateLogStream'
              - !!str logs:PutLogEvents'
              Resource:
              - !!str arn:aws:logs:us-east-1:352582918444:log-group:/aws/lambda/myLambdaFunction:*

  policy_elb:
    type: cloudify.nodes.aws.elb.Classic.Policy
    properties:
      resource_config:
        kwargs:
          PolicyName: pmcfyelbpolicy
          PolicyTypeName: ProxyProtocolPolicyType
          PolicyAttributes:
            - AttributeName: ProxyProtocol
              AttributeValue: 'true'
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: elb

  healthcheck_elb:
    type: cloudify.nodes.aws.elb.Classic.HealthCheck
    properties:
      resource_config:
        kwargs:
          HealthCheck:
            Target: 'TCP:1080'
            Interval: 30
            Timeout: 5
            UnhealthyThreshold: 2
            HealthyThreshold: 3
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: elb

  listener_elb:
    type: cloudify.nodes.aws.elb.Classic.Listener
    properties:
      resource_config:
        kwargs:
          Listeners:
          - Protocol: HTTP
            LoadBalancerPort: 80
            InstancePort: 1081
            InstanceProtocol: HTTP
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: elb

  elb:
    type: cloudify.nodes.aws.elb.Classic.LoadBalancer
    properties:
      resource_config:
        kwargs:
          Tags:
          - Key: name
            Value: boto3-plugin-elb
          LoadBalancerName: pmcfyelb
          Listeners: { get_property: [ listener_elb, resource_config, kwargs, Listeners ] }
          Scheme: internet-facing
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: bucket
    - type: cloudify.relationships.depends_on
      target: subnet1
    - type: cloudify.relationships.depends_on
      target: subnet2
    - type: cloudify.relationships.depends_on
      target: securitygroup
    - type: cloudify.relationships.depends_on
      target: internet_gateway_vpc
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: awssdk.cloudify_awssdk.elb.resources.classic.load_balancer.start
          inputs:
            resource_config:
              LoadBalancerAttributes:
                AccessLog:
                  Enabled: true
                  S3BucketName: pmcfy_example0
                  EmitInterval: 5

  securitygroup:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: a non-security group that allows all traffic.
      rules:
      - ip_protocol: -1
        from_port: -1
        to_port: -1
        cidr_ip: 0.0.0.0/0
    relationships:
    - type: cloudify.aws.relationships.security_group_contained_in_vpc
      target: vpc
    - type: cloudify.relationships.depends_on
      target: subnet1
    - type: cloudify.relationships.depends_on
      target: subnet2
    - type: cloudify.relationships.depends_on
      target: internet_gateway_vpc

  routetable_subnet2:
    type: cloudify.aws.nodes.RouteTable
    properties:
      aws_config: *aws_config
    relationships:
      - type: cloudify.aws.relationships.routetable_contained_in_vpc
        target: vpc
      - type: cloudify.aws.relationships.routetable_associated_with_subnet
        target: subnet2
      - type: cloudify.aws.relationships.route_table_to_gateway
        target: internet_gateway_vpc

  routetable_subnet1:
    type: cloudify.aws.nodes.RouteTable
    properties:
      aws_config: *aws_config
    relationships:
      - type: cloudify.aws.relationships.routetable_contained_in_vpc
        target: vpc
      - type: cloudify.aws.relationships.routetable_associated_with_subnet
        target: subnet1
      - type: cloudify.aws.relationships.route_table_to_gateway
        target: natgateway1
        target_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            establish:
              implementation: aws.cloudify_aws.vpc.routetable.create_route_to_gateway
              inputs: &destination_00000
                destination_cidr_block: 0.0.0.0/0

  natgateway2:
    type: cloudify.nodes.aws.ec2.NATGateway
    properties:
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: internet_gateway_vpc
    - type: cloudify.relationships.depends_on
      target: subnet2
    - type: cloudify.relationships.depends_on
      target: elasticip_natgateway2

  natgateway1:
    type: cloudify.nodes.aws.ec2.NATGateway
    properties:
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: subnet1
    - type: cloudify.relationships.depends_on
      target: elasticip_natgateway1

  elasticip_natgateway2:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc
    relationships:
    - type: cloudify.relationships.depends_on
      target: internet_gateway_vpc
    - type: cloudify.relationships.depends_on
      target: subnet2

  elasticip_natgateway1:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc
    relationships:
    - type: cloudify.relationships.depends_on
      target: internet_gateway_vpc
    - type: cloudify.relationships.depends_on
      target: subnet1

  internet_gateway_vpc:
    type: cloudify.aws.nodes.InternetGateway
    properties:
      aws_config: *aws_config
      cidr_block: '0.0.0.0/0'
    relationships:
    - type: cloudify.aws.relationships.gateway_connected_to_vpc
      target: vpc

  subnet2:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      cidr_block: '10.0.1.0/24'
      availability_zone: { get_input: aws_region_zone2 }
    relationships:
    - type: cloudify.aws.relationships.subnet_contained_in_vpc
      target: vpc

  subnet1:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      cidr_block:  '10.0.0.0/24'
      availability_zone: { get_input: aws_region_zone1 }
    relationships:
    - type: cloudify.aws.relationships.subnet_contained_in_vpc
      target: vpc

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      resource_config:
        kwargs:
          CidrBlock: '10.0.0.0/16'
      client_config: *client_config


  subscription:
    type: cloudify.nodes.aws.SNS.Subscription
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Protocol: sqs
          Endpoint: queue # Should match the target of a relationship if it is not arn
    relationships:
      - type: cloudify.relationships.depends_on
        target: topic
      - type: cloudify.relationships.depends_on
        target: queue

  topic:
    type: cloudify.nodes.aws.SNS.Topic
    properties:
      resource_config:
        kwargs:
          Name: TestCloudifyTopic
      client_config: *client_config

  queue:
    type: cloudify.nodes.aws.SQS.Queue
    properties:
      resource_config:
        kwargs:
          QueueName: test-queue
          Attributes:
            Policy: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "Sid1",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": [
                      "SQS:SendMessage",
                      "SQS:ReceiveMessage"
                    ],
                    "Resource": "test-queue"
                  }
                ]
              }
            MessageRetentionPeriod: '86400'
            VisibilityTimeout: '180'
      client_config: *client_config

  bucketpolicy_bucket:
    type: cloudify.nodes.aws.s3.BucketPolicy
    properties:
      resource_config:
        kwargs:
          Policy:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal: '*'
              Action:
              - 's3:PutObject'
              Resource:
                concat:
                  - 'arn:aws:s3:::'
                  - { get_property: [ bucket, resource_config, kwargs, Bucket ] }
                  - '/AWSLogs/'
                  - { get_input: aws_account_id }
                  - '/*'
            - Effect: Deny
              Principal: '*'
              Action:
              - 's3:DeleteObject'
              Resource:
                concat:
                  - 'arn:aws:s3:::'
                  - { get_property: [ bucket, resource_config, kwargs, Bucket ] }
                  - '/AWSLogs/'
                  - { get_input: aws_account_id }
                  - '/*'
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: bucket

  lifecyleconfiguration_bucket:
    type: cloudify.nodes.aws.s3.BucketLifecycleConfiguration
    properties:
      resource_config:
        kwargs:
          LifecycleConfiguration:
            Rules:
            - ID: Transition to Glacier and Expiration
              Prefix: bucket
              Status: Enabled
              Transition:
                Days: 5
                StorageClass: GLACIER
              Expiration:
                Days: 95
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: bucket

  bucket:
    type: cloudify.nodes.aws.s3.Bucket
    properties:
      resource_config:
        kwargs:
          ACL: public-read-write
          Bucket: pmcfy_example0
      client_config: *client_config
