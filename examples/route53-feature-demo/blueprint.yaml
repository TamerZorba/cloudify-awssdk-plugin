tosca_definitions_version: cloudify_dsl_1_3

imports:
- https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.1/resources/rest-service/cloudify/types/types.yaml
- http://getcloudify.org.s3.amazonaws.com/spec/aws-plugin/1.4.13/plugin.yaml
- plugin.yaml

inputs:

  aws_access_key_id:
    type: string
    default: { get_secret: aws_access_key_id }

  aws_secret_access_key:
    type: string
    default: { get_secret: aws_secret_access_key }

  aws_region_name:
    type: string
    default: { get_secret: aws_region_name }

dsl_definitions:
  client_config: &client_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    region_name: { get_input: aws_region_name }

  aws_config: &aws_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    ec2_region_name: { get_input: aws_region_name }

node_templates:

  dns_record_set_2:
    type: cloudify.nodes.aws.route53.RecordSet
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
    relationships:
    - type: cloudify.relationships.aws.route53.record_set.connected_to
      target: dns_hosted_zone
    - type: cloudify.relationships.depends_on
      target: instance
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: awssdk.cloudify_boto3.route53.resources.record_set.prepare
          inputs:
            resource_config:
              Action: CREATE
              ResourceRecordSet:
                Name: { concat: ["dev.", { get_property: [dns_hosted_zone, resource_id] }] }
                Type: !!str TXT
                TTL: !!int 60
                ResourceRecords:
                - Value: { concat: [ '"', { get_attribute: [ instance, ip ] } , '"' ] }

  instance:
    type: cloudify.aws.nodes.Instance
    properties:
      install_agent: false
      image_id: ami-c58c1dd3
      instance_type: t2.micro
      aws_config: *aws_config
    relationships:
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: dns_subnet

  dns_record_set_1:
    type: cloudify.nodes.aws.route53.RecordSet
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Action: UPSERT
          ResourceRecordSet:
            Name: { concat: ["staging.", { get_property: [dns_hosted_zone, resource_id] }] }
            Type: !!str TXT
            TTL: !!int 60
            ResourceRecords:
            - Value: '"Created using Cloudify"'
    relationships:
    - type: cloudify.relationships.aws.route53.record_set.connected_to
      target: dns_hosted_zone

  dns_hosted_zone:
    type: cloudify.nodes.aws.route53.HostedZone
    properties:
      resource_id: !!str getcloudify.org
      client_config: *client_config
      resource_config:
        kwargs:
          HostedZoneConfig:
            Comment: !!str Cloudify-generated DNS Hosted Zone
            PrivateZone: !!bool true
    #interfaces:
    #  cloudify.interfaces.lifecycle:
    #    delete:
    #      inputs:
    #        force_delete: true
    relationships:
    - type: cloudify.relationships.aws.route53.hosted_zone.connected_to
      target: dns_vpc

  dns_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      cidr_block:  '10.0.0.0/24'
      availability_zone: { concat: [ { get_input: aws_region_name }, 'b' ] }
    relationships:
    - type: cloudify.aws.relationships.subnet_contained_in_vpc
      target: dns_vpc

  dns_vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      cidr_block:  10.0.0.0/16
      aws_config: *aws_config
