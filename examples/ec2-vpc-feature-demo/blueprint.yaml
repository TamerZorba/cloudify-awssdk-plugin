tosca_definitions_version: cloudify_dsl_1_3

imports:
- https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.1/resources/rest-service/cloudify/types/types.yaml
- http://getcloudify.org.s3.amazonaws.com/spec/aws-plugin/1.4.13/plugin.yaml
- plugin.yaml

inputs:

  aws_access_key_id:
    type: string
    default: { get_secret: aws_access_key_id }

  aws_secret_access_key:
    type: string
    default: { get_secret: aws_secret_access_key }

  aws_region_name:
    type: string
    default: { get_secret: aws_region_name }

dsl_definitions:

  client_config: &client_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    region_name: { get_input: aws_region_name }

node_templates:

  elasticip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      resource_config:
        kwargs:
          Domain: 'vpc'
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.connected_to
        target: network_interface

  network_interface:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.connected_to
        target: subnet

  network_acl:
    type: cloudify.nodes.aws.ec2.NetworkACL
    properties:
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.relationships.connected_to
        target: subnet

  network_acl_entry:
    type: cloudify.nodes.aws.ec2.NetworkAclEntry
    properties:
      resource_config:
        kwargs:
          RuleNumber: 100
          Protocol: '-1'
          RuleAction: 'allow'
          Egress: False
          CidrBlock: '0.0.0.0/0'
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: network_acl

  dhcp_options:
    type: cloudify.nodes.aws.ec2.DHCPOptions
    properties:
      resource_config:
        kwargs:
          DhcpConfigurations:
            - Key: domain-name
              Values:
                - example.com
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.connected_to
        target: vpc

  vpn_gateway:
    type: cloudify.nodes.aws.ec2.VPNGateway
    properties:
      resource_config:
        kwargs:
          Type: 'ipsec.1'
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.connected_to
        target: vpc

  customer_gateway:
    type: cloudify.nodes.aws.ec2.CustomerGateway
    properties:
      resource_config:
        kwargs:
          Type: 'ipsec.1'
          PublicIp: '34.224.150.134'
          BgpAsn: 65000
      client_config: *client_config

  igw:
    type: cloudify.nodes.aws.ec2.InternetGateway
    properties:
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.connected_to
        target: vpc

  route:
    type: cloudify.nodes.aws.ec2.Route
    properties:
      resource_config:
        kwargs:
          DestinationCidrBlock: '0.0.0.0/0'
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: route_table
      - type: cloudify.relationships.connected_to
        target: igw

  route_table:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.relationships.connected_to
        target: subnet

  tags:
    type: cloudify.nodes.aws.ec2.Tags
    properties:
      resource_config:
        kwargs:
          Tags:
          - Key: Blueprint
            Value: ec2-vpc-feature-demo
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc
    - type: cloudify.relationships.depends_on
      target: subnet

  securitygroup2_egress:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleEgress
    properties:
      client_config: *client_config
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            aws_resource_id: { get_attribute: [ securitygroup2, aws_resource_id ]}
            resource_config:
              IpPermissions:
              - FromPort: 443
                ToPort: 443
                IpProtocol: tcp
                IpRanges:
                - CidrIp: 0.0.0.0/0
                UserIdGroupPairs:
                - GroupId: { get_attribute: [ securitygroup1, aws_resource_id ] }
        stop:
          inputs:
            aws_resource_id: { get_attribute: [ securitygroup2, aws_resource_id ]}
            resource_config:
              IpPermissions:
              - FromPort: 443
                ToPort: 443
                IpProtocol: tcp
                IpRanges:
                - CidrIp: 0.0.0.0/0
                UserIdGroupPairs:
                - GroupId: { get_attribute: [ securitygroup1, aws_resource_id ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: securitygroup2
    - type: cloudify.relationships.depends_on
      target: securitygroup1

  securitygroup2_ingress:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: *client_config
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            aws_resource_id: { get_attribute: [ securitygroup2, aws_resource_id ]}
            resource_config:
              IpPermissions:
              - FromPort: 443
                ToPort: 443
                IpProtocol: tcp
                IpRanges:
                - CidrIp: 0.0.0.0/0
                UserIdGroupPairs:
                - GroupId: { get_attribute: [ securitygroup1, aws_resource_id ] }
        stop:
          inputs:
            aws_resource_id: { get_attribute: [ securitygroup2, aws_resource_id ]}
            resource_config:
              IpPermissions:
              - FromPort: 443
                ToPort: 443
                IpProtocol: tcp
                IpRanges:
                - CidrIp: 0.0.0.0/0
                UserIdGroupPairs:
                - GroupId: { get_attribute: [ securitygroup1, aws_resource_id ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: securitygroup2
    - type: cloudify.relationships.depends_on
      target: securitygroup1

  securitygroup1_egress:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleEgress
    properties:
      client_config: *client_config
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            aws_resource_id: { get_attribute: [ securitygroup1, aws_resource_id ]}
            resource_config:
              IpPermissions:
              - FromPort: 443
                ToPort: 443
                IpProtocol: tcp
                IpRanges:
                - CidrIp: 0.0.0.0/0
                UserIdGroupPairs:
                - GroupId: { get_attribute: [ securitygroup2, aws_resource_id ] }
        stop:
          inputs:
            aws_resource_id: { get_attribute: [ securitygroup1, aws_resource_id ]}
            resource_config:
              IpPermissions:
              - FromPort: 443
                ToPort: 443
                IpProtocol: tcp
                IpRanges:
                - CidrIp: 0.0.0.0/0
                UserIdGroupPairs:
                - GroupId: { get_attribute: [ securitygroup2, aws_resource_id ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: securitygroup1
    - type: cloudify.relationships.depends_on
      target: securitygroup2

  securitygroup1_ingress:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: *client_config
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            aws_resource_id: { get_attribute: [ securitygroup1, aws_resource_id ]}
            resource_config:
              IpPermissions:
              - FromPort: 443
                ToPort: 443
                IpProtocol: tcp
                IpRanges:
                - CidrIp: 0.0.0.0/0
                UserIdGroupPairs:
                - GroupId: { get_attribute: [ securitygroup2, aws_resource_id ] }
        stop:
          inputs:
            aws_resource_id: { get_attribute: [ securitygroup1, aws_resource_id ]}
            resource_config:
              IpPermissions:
              - FromPort: 443
                ToPort: 443
                IpProtocol: tcp
                IpRanges:
                - CidrIp: 0.0.0.0/0
                UserIdGroupPairs:
                - GroupId: { get_attribute: [ securitygroup2, aws_resource_id ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: securitygroup1
    - type: cloudify.relationships.depends_on
      target: securitygroup2

  securitygroup2:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      resource_config:
        kwargs:
          GroupName: SecurityGroup2
          Description: Example Security Group 2
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc

  securitygroup1:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      resource_config:
        kwargs:
          GroupName: SecurityGroup1
          Description: Example Security Group 1
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc

  subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        kwargs:
          CidrBlock: '10.0.0.0/24'
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      resource_config:
        kwargs:
          CidrBlock: '10.0.0.0/16'
      client_config: *client_config
